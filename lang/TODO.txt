PL that:
	- Has some scala features
	- Is dynamic, but allows dynamic type assertions or tests
	- objects/records (NO classes)
	- NO threads
	- JVM lang
	- Reactive NIO
	- uses jvm libraries/methods/ and treats them as first-class values using the appropriate abstractions
	- Value Restriction
	- Neither classes nor objects are types (there are no static types!).
	- A language that can manipulate "containers" like docker and orchestrate process creation.
	
 	

Notation

<env,e> ==> v means "e evaluates to v in environment env"

{fun x -> e | env} denotes a closure with environment env.

[x1->v1, x2->v2, ...] denotes the environment with x1 bound to v1, x2 bound to v2 and so on.

env[x->v] denotes the environment env extended with a binding from x to v. If env already has a binding for x then it is replaced.

env(x) denotes the value associated with x in env.

we use + in the semantics to stand in for any basic arithmetic operation like +, *, <, etc.

Syntax

e ::= x | e1 e2 | fun x -> e
    | n | e1 + e2
    | (e1,e2) | fst e1 | snd e2
    | Left e | Right e
    | match e with Left x1 -> e1 | Right x2 -> e2
    | let x = e1 in e2
Semantics

<env, x> ==> v
  if env(x) = v

<env, e1 e2> ==> v'
  if  <env,e1> ==> {fun x -> e | newenv}
  and <env,e2> ==> v
  and <newenv[x->v],e> ==> v'

<env, fun x -> e> ==> {fun x -> e | env}

<env, n> ==> n

<env, e1 + e2> ==> n
  if  <env,e1> ==> n1
  and <env,e2> ==> n2
  and n is the result of applying the primitive operation + to n1 and n2

<env, (e1,e2)> ==> (v1,v2)
  if  <env,e1> ==> v1
  and <env,e2> ==> v2

<env, fst e> ==> v1
  if <env,e> ==> (v1,v2)

<env, snd e> ==> v2
  if <env,e> ==> (v1,v2)

<env, Left e> ==> Left v
  if <env,e> ==> v

<env, Right e> ==> Right v
  if <env,e> ==> v

<env, match e with Left x1 -> e1 | Right x2 -> e2> ==> v1
  if  <env,e> ==> Left v
  and <env[x1->v], e1> ==> v1

<env, match e with Left x1 -> e1 | Right x2 -> e2> ==> v2
  if  <env,e> ==> Right v
  and <env[x2->v], e2> ==> v2

<env, let x = e1 in e2> ==> v2
  if  <env,e1> ==> v1
  and <env[x->v1],e2> ==> v2


  type card = Card of regular | Joker
and regular = { suit : card_suit; name : card_name; }
and card_suit = Heart | Club | Spade | Diamond
and card_name = Ace | King | Queen | Jack | Simple of int;;

let club_jack = Card { name = Jack; suit = Club; };;
val club_jack : card = Card {suit=Club; name=Jack}

let card n s = Card {name = n; suit = s}
let king s = card King s;;
val card : name -> suit -> card = <fun>
val king : suit -> card = <fun>

let value c =
match c with
| Joker -> 0
| Card {name = Ace} -> 14
| Card {name = King} -> 13
| Card {name = Queen} -> 12
| Card {name = Jack} -> 11
| Card {name = Simple k} -> k;;


let club_jack = Card { name = Jack; suit = Club; };;

type ’a option = Some of ’a | None


type account = { number : int; mutable balance : float }
let retrieve account requested =
let s = min account.balance requested in
account.balance <- account.balance −. s; s;;



 try E with x => a | raise E

class counter = object
val mutable n = 0
method incr = n <- n+1
method get = n
end;;

let c = new counter;;

c#incr; c#incr; c#get;;

class fileout’ filename =
object (self)
inherit fileout filename
method close = close_out chan
end

class virtual writer =
object (this)
method virtual char : char -> unit
method string s =
for i = 0 to String.length s −1 do this#char s.[i] done
method int i = this#string (string_of_int i)
end;;

module Float =
struct
type t = float
let unit = 1.0
let plus = (+.)
let prod = ( *. )
end;;

module type CURRENCY =
sig
type t
val unit : t
val plus : t -> t -> t
val prod : float -> t -> t
end;;

//In Float the type t is concrete, so it can be used for ”float”.
// Here we create two isomorphic (same operations) modules, which are 
// NOT identical however.  Float, whose type t = float is concrete is 
// abstracted through the type cast (Float : CURRENCY) to an existential
// type and this type is assigned to Euro. The existential "t" of EURO can
// never be the same as the existential "t" of DOLLAR.

module Euro = (Float : CURRENCY);;
module Dollar = (Float : CURRENCY);;

